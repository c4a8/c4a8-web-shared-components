var f=Object.defineProperty;var p=(l,t,e)=>t in l?f(l,t,{enumerable:!0,configurable:!0,writable:!0,value:e}):l[t]=e;var o=(l,t,e)=>p(l,typeof t!="symbol"?t+"":t,e);import{S as a}from"./67puUqJO.js";const i=class i{constructor(t,e){var s;if(!(t instanceof Element))return console.debug("Invalid root element");this.root=t,this.count=1,this.selector=this.getCurrentSelector(),this.vueInstance=e,this.elementClasses=(s=this.vueInstance)==null?void 0:s.elementClasses,this.currentElements=this.root.querySelectorAll(this.selector),this.root.matches(this.selector)&&(this.currentElements=this.mergeNodes(this.root,this.currentElements)),e?this.resetAnimationNew():this.resetAnimation(),this.initialize()}resetAnimation(){this.root.querySelectorAll(`.${a.IS_STARTING}`).forEach(t=>{t.classList.remove(a.IS_STARTING)})}resetAnimationNew(){this.root.querySelectorAll(`.${a.IS_STARTING}`).forEach(t=>{this.updateClassState(t,a.IS_STARTING,!1)})}mergeNodes(t,e){const s=Array.from(e);return s.unshift(t),s}getCurrentSelector(){return`[data-utility-animation-step="${this.count}"]`}updateCurrentElement(t){const e=[];this.currentElements.forEach(s=>{t.srcElement!==s&&e.push(s)}),this.currentElements=e}handleAnimationEnd(t){const e=i.getGroup(t.srcElement);if(e){const s=parseInt(e.style.getPropertyValue(i.groupItemsLoadedProperty),10)||0;i.setGroupItemsLoaded(e,s+1)}this.updateCurrentElement(t),!(this.currentElements.length>0)&&(this.count++,this.currentElements=this.root.querySelectorAll(this.getCurrentSelector()),this.currentElements!==null&&this.currentElements.length>0?this.startAnimation():this.setEnd())}startStepAnimationNew(t){t.forEach(e=>{this.updateClassState(e,a.IS_STARTING,!0)})}startStepAnimation(t){t.forEach(e=>{e.classList.add(a.IS_STARTING)})}setEnd(){this.root.setAttribute(i.endDataset,!0)}startAnimation(){this.vueInstance?this.startStepAnimationNew(this.currentElements):this.startStepAnimation(this.currentElements)}updateClassState(t,e,s){const r=t.dataset.utilityAnimationRef;r&&(this.elementClasses[r]=s?e:null)}static getGroup(t){return t.closest(".utility-animation__group")}initialize(){this.root.addEventListener("animationend",e=>{this.handleAnimationEnd(e)}),new MutationObserver(e=>{e.forEach(s=>{var r;s.type==="attributes"&&s.attributeName.startsWith(i.inViewportDataset)&&((r=s.target)==null?void 0:r.getAttribute(i.inViewportDataset))==="true"&&this.startAnimation()})}).observe(this.root,{attributes:!0})}static setGroupItemsLoaded(t,e){t.style.setProperty(this.groupItemsLoadedProperty,e)}static hasPercentageOffset(t){return t.root.classList.contains("utility-animation--percentage-offset")}static hasSmallOffset(t){return t.root.classList.contains("utility-animation--small-offset")}static addObserver(t){const r=n=>{n.forEach(c=>{c.isIntersecting?c.target.setAttribute(this.inViewportDataset,!0):c.target.classList.contains("utility-animation--enter-exit")&&c.target.removeAttribute(this.inViewportDataset)})},u=new IntersectionObserver(r,{rootMargin:"0px 0px -200px 0px",threshold:0}),m=new IntersectionObserver(r,{rootMargin:"0px 0px 0px 0px",threshold:.4}),d=new IntersectionObserver(r,{rootMargin:"0px 0px -100px 0px",threshold:0});(t?[t]:this.instances).forEach(n=>{i.hasSmallOffset(n)?d.observe(n.root):i.hasPercentageOffset(n)?m.observe(n.root):u.observe(n.root)})}static resetGroup(t){this.setGroupItemsLoaded(t,0),this.instances.forEach(e=>{if(this.getGroup(e.root)===t){const r=e.root;e.currentElements=[r],r.removeAttribute("data-utility-animation-end"),e.startAnimation()}})}static initElement(t,e){const s=t.$el?t.$el:t,r=new this(s,e);return r.root&&this.instances.push(r),r}static init(t,e){this.instances=[],[].forEach.call(t||document.querySelectorAll(this.rootSelector),s=>{this.initElement(s,e)}),this.addObserver()}static isElementObserved(t){return this.instances.some(e=>e.root===t)}static observeElementIfNotAlready(t){let e;this.isElementObserved(t)||(e=this.initElement(t)),this.addObserver(e)}static getIndexStyle(t){return`--utility-animation-index: ${t}`}};o(i,"rootSelector",".utility-animation"),o(i,"inViewportDataset","data-utility-animation-in-viewport"),o(i,"endDataset","data-utility-animation-end"),o(i,"instances",[]),o(i,"groupItemsLoadedProperty","--utility-animation-items-loaded");let h=i;export{h as U};
